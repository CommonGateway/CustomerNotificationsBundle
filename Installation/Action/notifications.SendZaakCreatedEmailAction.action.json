{
    "title": "SendZaakCreatedEmailAction",
    "$id": "https://commongateway.nl/action/notifications.SendZaakCreatedEmailAction.action.json",
    "$schema": "https://docs.commongateway.nl/schemas/Action.schema.json",
    "version": "0.0.1",
    "listens": ["notifications.zaak.created.email"],
    "conditions":
    {
        "==": [1, 1]
    },
    "class": "CommonGateway\\CustomerNotificationsBundle\\ActionHandler\\EmailHandler",
    "configuration":
    {
        "serviceDNS": "",
        "template": "PCFET0NUWVBFIGh0bWwgUFVCTElDICItLy9XM0MvL0RURCBYSFRNTCAxLjAgVHJhbnNpdGlvbmFsLy9FTiIKICAgICAgICAiaHR0cDovL3d3dy53My5vcmcvVFIveGh0bWwxL0RURC94aHRtbDEtdHJhbnNpdGlvbmFsLmR0ZCI+CjxodG1sIHhtbG5zPSJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sIj4KPGhlYWQ+CiAgICA8bWV0YSBuYW1lPSJ2aWV3cG9ydCIgY29udGVudD0id2lkdGg9ZGV2aWNlLXdpZHRoLCBpbml0aWFsLXNjYWxlPTEuMCIvPgogICAgPG1ldGEgaHR0cC1lcXVpdj0iQ29udGVudC1UeXBlIiBjb250ZW50PSJ0ZXh0L2h0bWw7IGNoYXJzZXQ9VVRGLTgiLz4KICAgIDx0aXRsZT57eyBzdWJqZWN0IH19PC90aXRsZT4KICAgIDxsaW5rIHJlbD0icHJlY29ubmVjdCIgaHJlZj0iaHR0cHM6Ly9mb250cy5nc3RhdGljLmNvbSIvPgogICAgPGxpbmsKICAgICAgICAgICAgaHJlZj0iaHR0cHM6Ly9mb250cy5nb29nbGVhcGlzLmNvbS9jc3MyP2ZhbWlseT1GYXVzdGluYTp3Z2h0QDYwMCZkaXNwbGF5PXN3YXAiCiAgICAgICAgICAgIHJlbD0ic3R5bGVzaGVldCIKICAgIC8+CiAgICA8bGluawogICAgICAgICAgICBocmVmPSJodHRwczovL2ZvbnRzLmdvb2dsZWFwaXMuY29tL2NzczI/ZmFtaWx5PVNvdXJjZStTYW5zK1BybyZkaXNwbGF5PXN3YXAiCiAgICAgICAgICAgIHJlbD0ic3R5bGVzaGVldCIKICAgIC8+CiAgICA8c3R5bGUgdHlwZT0idGV4dC9jc3MiIHJlbD0ic3R5bGVzaGVldCIgbWVkaWE9ImFsbCI+CiAgICAgICAgLyogQmFzZSAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKi8KICAgICAgICBib2R5IHsKICAgICAgICAgICAgd2lkdGg6IDEwMCUgIWltcG9ydGFudDsKICAgICAgICAgICAgaGVpZ2h0OiAxMDAlOwogICAgICAgICAgICBtYXJnaW46IDA7CiAgICAgICAgICAgIG1zby1saW5lLWhlaWdodC1ydWxlOiBleGFjdGx5OwogICAgICAgICAgICBsaW5lLWhlaWdodDogMS40OwogICAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmZmZmZmOwogICAgICAgICAgICBjb2xvcjogIzc0Nzg3ZTsKICAgICAgICAgICAgLXdlYmtpdC10ZXh0LXNpemUtYWRqdXN0OiBub25lOwogICAgICAgIH0KICAgICAgICBwLAogICAgICAgIHVsLAogICAgICAgIG9sLAogICAgICAgIGJsb2NrcXVvdGUgewogICAgICAgICAgICBtc28tbGluZS1oZWlnaHQtcnVsZTogZXhhY3RseTsKICAgICAgICAgICAgbGluZS1oZWlnaHQ6IDEuNDsKICAgICAgICAgICAgdGV4dC1hbGlnbjogbGVmdDsKICAgICAgICB9CiAgICAgICAgYSB7CiAgICAgICAgICAgIGNvbG9yOiAjMWQ1NWZmOwogICAgICAgICAgICB0ZXh0LWRlY29yYXRpb246IG5vbmU7CiAgICAgICAgfQogICAgICAgIGE6aG92ZXIgewogICAgICAgICAgICB0ZXh0LWRlY29yYXRpb246IHVuZGVybGluZTsKICAgICAgICB9CiAgICAgICAgcCBhIHsKICAgICAgICAgICAgdGV4dC1kZWNvcmF0aW9uOiB1bmRlcmxpbmU7CiAgICAgICAgfQogICAgICAgIGEgaW1nIHsKICAgICAgICAgICAgYm9yZGVyOiBub25lOwogICAgICAgIH0KICAgICAgICB0ZCB7CiAgICAgICAgICAgIHdvcmQtYnJlYWs6IGJyZWFrLXdvcmQ7CiAgICAgICAgfQogICAgICAgIC8qIExheW91dCAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKi8KICAgICAgICAuaGVhZGVyIHsKICAgICAgICAgICAgYmFja2dyb3VuZDogIzFkNTVmZjsKICAgICAgICAgICAgd2lkdGg6IDEwMCU7CiAgICAgICAgICAgIGhlaWdodDogMjM2cHg7CiAgICAgICAgICAgIGJhY2tncm91bmQtcmVwZWF0OiBuby1yZXBlYXQ7CiAgICAgICAgICAgIGJhY2tncm91bmQtcG9zaXRpb246IGNlbnRlcjsKICAgICAgICB9CiAgICAgICAgLmhlYWRlci1jZWxsIHsKICAgICAgICAgICAgcGFkZGluZzogMTZweCAyNHB4OwogICAgICAgIH0KICAgICAgICAuZW1haWwtd3JhcHBlciB7CiAgICAgICAgICAgIHdpZHRoOiAxMDAlOwogICAgICAgICAgICBtYXJnaW46IDA7CiAgICAgICAgICAgIHBhZGRpbmc6IDA7CiAgICAgICAgICAgIC1wcmVtYWlsZXItd2lkdGg6IDEwMCU7CiAgICAgICAgICAgIC1wcmVtYWlsZXItY2VsbHBhZGRpbmc6IDA7CiAgICAgICAgICAgIC1wcmVtYWlsZXItY2VsbHNwYWNpbmc6IDA7CiAgICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6ICNmZmZmZmY7CiAgICAgICAgfQogICAgICAgIC5lbWFpbC1jb250ZW50IHsKICAgICAgICAgICAgd2lkdGg6IDEwMCU7CiAgICAgICAgICAgIG1hcmdpbjogMDsKICAgICAgICAgICAgcGFkZGluZzogMDsKICAgICAgICAgICAgLXByZW1haWxlci13aWR0aDogMTAwJTsKICAgICAgICAgICAgLXByZW1haWxlci1jZWxscGFkZGluZzogMDsKICAgICAgICAgICAgLXByZW1haWxlci1jZWxsc3BhY2luZzogMDsKICAgICAgICB9CiAgICAgICAgLyogTWFzdGhlYWQgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKi8KICAgICAgICAuZW1haWwtbWFzdGhlYWQgewogICAgICAgICAgICBwYWRkaW5nOiAyNXB4IDA7CiAgICAgICAgICAgIHRleHQtYWxpZ246IGNlbnRlcjsKICAgICAgICB9CiAgICAgICAgLmVtYWlsLW1hc3RoZWFkX2xvZ28gewogICAgICAgICAgICB3aWR0aDogOTRweDsKICAgICAgICB9CiAgICAgICAgLmVtYWlsLW1hc3RoZWFkX25hbWUgewogICAgICAgICAgICBmb250LXNpemU6IDE2cHg7CiAgICAgICAgICAgIGZvbnQtd2VpZ2h0OiA2MDA7CiAgICAgICAgICAgIGNvbG9yOiAjYmJiZmMzOwogICAgICAgICAgICB0ZXh0LWRlY29yYXRpb246IG5vbmU7CiAgICAgICAgICAgIHRleHQtc2hhZG93OiAwIDFweCAwIHdoaXRlOwogICAgICAgIH0KICAgICAgICAvKiBCb2R5IC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqLwogICAgICAgIC5lbWFpbC1ib2R5IHsKICAgICAgICAgICAgd2lkdGg6IDEwMCU7CiAgICAgICAgICAgIG1hcmdpbjogMDsKICAgICAgICAgICAgcGFkZGluZzogMDsKICAgICAgICAgICAgLXByZW1haWxlci13aWR0aDogMTAwJTsKICAgICAgICAgICAgLXByZW1haWxlci1jZWxscGFkZGluZzogMDsKICAgICAgICAgICAgLXByZW1haWxlci1jZWxsc3BhY2luZzogMDsKICAgICAgICAgICAgYmFja2dyb3VuZDogbm9uZTsKICAgICAgICB9CiAgICAgICAgLmVtYWlsLWJvZHlfaW5uZXIgewogICAgICAgICAgICB3aWR0aDogNjQwcHg7CiAgICAgICAgICAgIG1hcmdpbjogMCBhdXRvOwogICAgICAgICAgICBwYWRkaW5nOiAwOwogICAgICAgICAgICAtcHJlbWFpbGVyLXdpZHRoOiA1NzBweDsKICAgICAgICAgICAgLXByZW1haWxlci1jZWxscGFkZGluZzogMDsKICAgICAgICAgICAgLXByZW1haWxlci1jZWxsc3BhY2luZzogMDsKICAgICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogI2ZmZmZmZjsKICAgICAgICB9CiAgICAgICAgLmVtYWlsLWZvb3RlciB7CiAgICAgICAgICAgIHdpZHRoOiA2NDBweDsKICAgICAgICAgICAgbWFyZ2luOiAwIGF1dG87CiAgICAgICAgICAgIHBhZGRpbmc6IDA7CiAgICAgICAgICAgIC1wcmVtYWlsZXItd2lkdGg6IDU3MHB4OwogICAgICAgICAgICAtcHJlbWFpbGVyLWNlbGxwYWRkaW5nOiAwOwogICAgICAgICAgICAtcHJlbWFpbGVyLWNlbGxzcGFjaW5nOiAwOwogICAgICAgICAgICB0ZXh0LWFsaWduOiBjZW50ZXI7CiAgICAgICAgfQogICAgICAgIC5lbWFpbC1mb290ZXIgcCB7CiAgICAgICAgICAgIGNvbG9yOiAjYWVhZWFlOwogICAgICAgIH0KICAgICAgICAuYm9keS1hY3Rpb24gewogICAgICAgICAgICB3aWR0aDogMTAwJTsKICAgICAgICAgICAgbWFyZ2luOiA0MHB4IGF1dG87CiAgICAgICAgICAgIHBhZGRpbmc6IDA7CiAgICAgICAgICAgIC1wcmVtYWlsZXItd2lkdGg6IDEwMCU7CiAgICAgICAgICAgIC1wcmVtYWlsZXItY2VsbHBhZGRpbmc6IDA7CiAgICAgICAgICAgIC1wcmVtYWlsZXItY2VsbHNwYWNpbmc6IDA7CiAgICAgICAgICAgIHRleHQtYWxpZ246IGNlbnRlcjsKICAgICAgICB9CiAgICAgICAgLmJvZHktc3ViIHsKICAgICAgICAgICAgbWFyZ2luLXRvcDogMjVweDsKICAgICAgICAgICAgcGFkZGluZy10b3A6IDI1cHg7CiAgICAgICAgICAgIGJvcmRlci10b3A6IDFweCBzb2xpZCAjZWRlZmYyOwogICAgICAgIH0KICAgICAgICAuY29udGVudC1jZWxsIHsKICAgICAgICAgICAgcGFkZGluZzogMzZweCAxNnB4OwogICAgICAgIH0KICAgICAgICAucHJlaGVhZGVyIHsKICAgICAgICAgICAgZGlzcGxheTogbm9uZSAhaW1wb3J0YW50OwogICAgICAgICAgICB2aXNpYmlsaXR5OiBoaWRkZW47CiAgICAgICAgICAgIG1zby1oaWRlOiBhbGw7CiAgICAgICAgICAgIGZvbnQtc2l6ZTogMXB4OwogICAgICAgICAgICBtc28tbGluZS1oZWlnaHQtcnVsZTogZXhhY3RseTsKICAgICAgICAgICAgbGluZS1oZWlnaHQ6IDFweDsKICAgICAgICAgICAgbWF4LWhlaWdodDogMDsKICAgICAgICAgICAgbWF4LXdpZHRoOiAwOwogICAgICAgICAgICBvcGFjaXR5OiAwOwogICAgICAgICAgICBvdmVyZmxvdzogaGlkZGVuOwogICAgICAgIH0KICAgICAgICAvKiBBdHRyaWJ1dGUgbGlzdCAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKi8KICAgICAgICAuYXR0cmlidXRlcyB7CiAgICAgICAgICAgIG1hcmdpbjogMCAwIDIxcHg7CiAgICAgICAgfQogICAgICAgIC5hdHRyaWJ1dGVzX2NvbnRlbnQgewogICAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZWRlZmYyOwogICAgICAgICAgICBwYWRkaW5nOiAxNnB4OwogICAgICAgIH0KICAgICAgICAuYXR0cmlidXRlc19pdGVtIHsKICAgICAgICAgICAgcGFkZGluZzogMDsKICAgICAgICB9CiAgICAgICAgLyogUmVsYXRlZCBJdGVtcyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKi8KICAgICAgICAucmVsYXRlZCB7CiAgICAgICAgICAgIHdpZHRoOiAxMDAlOwogICAgICAgICAgICBtYXJnaW46IDA7CiAgICAgICAgICAgIHBhZGRpbmc6IDI1cHggMCAwIDA7CiAgICAgICAgICAgIC1wcmVtYWlsZXItd2lkdGg6IDEwMCU7CiAgICAgICAgICAgIC1wcmVtYWlsZXItY2VsbHBhZGRpbmc6IDA7CiAgICAgICAgICAgIC1wcmVtYWlsZXItY2VsbHNwYWNpbmc6IDA7CiAgICAgICAgfQogICAgICAgIC5yZWxhdGVkX2l0ZW0gewogICAgICAgICAgICBwYWRkaW5nOiAxMHB4IDA7CiAgICAgICAgICAgIGNvbG9yOiAjNzQ3ODdlOwogICAgICAgICAgICBmb250LXNpemU6IDE1cHg7CiAgICAgICAgICAgIG1zby1saW5lLWhlaWdodC1ydWxlOiBleGFjdGx5OwogICAgICAgICAgICBsaW5lLWhlaWdodDogMThweDsKICAgICAgICB9CiAgICAgICAgLnJlbGF0ZWRfaXRlbS10aXRsZSB7CiAgICAgICAgICAgIGRpc3BsYXk6IGJsb2NrOwogICAgICAgICAgICBtYXJnaW46IDAuNWVtIDAgMDsKICAgICAgICB9CiAgICAgICAgLnJlbGF0ZWRfaXRlbS10aHVtYiB7CiAgICAgICAgICAgIGRpc3BsYXk6IGJsb2NrOwogICAgICAgICAgICBwYWRkaW5nLWJvdHRvbTogMTBweDsKICAgICAgICB9CiAgICAgICAgLnJlbGF0ZWRfaGVhZGluZyB7CiAgICAgICAgICAgIGJvcmRlci10b3A6IDFweCBzb2xpZCAjZWRlZmYyOwogICAgICAgICAgICB0ZXh0LWFsaWduOiBjZW50ZXI7CiAgICAgICAgICAgIHBhZGRpbmc6IDI1cHggMCAxMHB4OwogICAgICAgIH0KICAgICAgICAvKiBVdGlsaXRpZXMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICovCiAgICAgICAgLm5vLW1hcmdpbiB7CiAgICAgICAgICAgIG1hcmdpbjogMDsKICAgICAgICB9CiAgICAgICAgLm1hcmdpbi10b3AgewogICAgICAgICAgICBtYXJnaW4tdG9wOiA4cHg7CiAgICAgICAgfQogICAgICAgIC5hbGlnbi1yaWdodCB7CiAgICAgICAgICAgIHRleHQtYWxpZ246IHJpZ2h0OwogICAgICAgIH0KICAgICAgICAuYWxpZ24tbGVmdCB7CiAgICAgICAgICAgIHRleHQtYWxpZ246IGxlZnQ7CiAgICAgICAgfQogICAgICAgIC5hbGlnbi1jZW50ZXIgewogICAgICAgICAgICB0ZXh0LWFsaWduOiBjZW50ZXI7CiAgICAgICAgfQogICAgICAgIC8qTWVkaWEgUXVlcmllcyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKi8KICAgICAgICBAbWVkaWEgb25seSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6IDYwMHB4KSB7CiAgICAgICAgICAgIC5lbWFpbC1ib2R5X2lubmVyLAogICAgICAgICAgICAuZW1haWwtZm9vdGVyIHsKICAgICAgICAgICAgICAgIHdpZHRoOiAxMDAlICFpbXBvcnRhbnQ7CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgQG1lZGlhIG9ubHkgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiA1MDBweCkgewogICAgICAgICAgICAuYnV0dG9uIHsKICAgICAgICAgICAgICAgIHdpZHRoOiAxMDAlICFpbXBvcnRhbnQ7CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgLyogQ2FyZHMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICovCiAgICAgICAgLmNhcmQgewogICAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmZmOwogICAgICAgICAgICBib3JkZXItdG9wOiAxcHggc29saWQgI2UwZTFlNTsKICAgICAgICAgICAgYm9yZGVyLXJpZ2h0OiAxcHggc29saWQgI2UwZTFlNTsKICAgICAgICAgICAgYm9yZGVyLWJvdHRvbTogMXB4IHNvbGlkICNlMGUxZTU7CiAgICAgICAgICAgIGJvcmRlci1sZWZ0OiAxcHggc29saWQgI2UwZTFlNTsKICAgICAgICAgICAgcGFkZGluZzogMjRweDsKICAgICAgICAgICAgZGlzcGxheTogaW5saW5lLWJsb2NrOwogICAgICAgICAgICBjb2xvcjogIzM5MzkzYTsKICAgICAgICAgICAgdGV4dC1kZWNvcmF0aW9uOiBub25lOwogICAgICAgICAgICB3aWR0aDogMTAwJTsKICAgICAgICAgICAgYm9yZGVyLXJhZGl1czogM3B4OwogICAgICAgICAgICBib3gtc2hhZG93OiAwIDRweCAzcHggLTNweCByZ2JhKDAsIDAsIDAsIDAuMDgpOwogICAgICAgICAgICAtd2Via2l0LXRleHQtc2l6ZS1hZGp1c3Q6IG5vbmU7CiAgICAgICAgICAgIG1zby1saW5lLWhlaWdodC1ydWxlOiBleGFjdGx5OwogICAgICAgICAgICBsaW5lLWhlaWdodDogMS43NTsKICAgICAgICAgICAgbGV0dGVyLXNwYWNpbmc6IDAuOHB4OwogICAgICAgIH0KICAgICAgICAvKiBCdXR0b25zIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqLwogICAgICAgIC5idXR0b24gewogICAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjMWRiNGVkOwogICAgICAgICAgICBib3JkZXItdG9wOiAxMHB4IHNvbGlkICMxZGI0ZWQ7CiAgICAgICAgICAgIGJvcmRlci1yaWdodDogMThweCBzb2xpZCAjMWRiNGVkOwogICAgICAgICAgICBib3JkZXItYm90dG9tOiAxMHB4IHNvbGlkICMxZGI0ZWQ7CiAgICAgICAgICAgIGJvcmRlci1sZWZ0OiAxOHB4IHNvbGlkICMxZGI0ZWQ7CiAgICAgICAgICAgIGRpc3BsYXk6IGlubGluZS1ibG9jazsKICAgICAgICAgICAgY29sb3I6ICNmZmY7CiAgICAgICAgICAgIHRleHQtZGVjb3JhdGlvbjogbm9uZTsKICAgICAgICAgICAgYm9yZGVyLXJhZGl1czogNHB4OwogICAgICAgICAgICBib3gtc2hhZG93OiAwIDJweCAzcHggcmdiYSgwLCAwLCAwLCAwLjE2KTsKICAgICAgICAgICAgLXdlYmtpdC10ZXh0LXNpemUtYWRqdXN0OiBub25lOwogICAgICAgICAgICBtc28tbGluZS1oZWlnaHQtcnVsZTogZXhhY3RseTsKICAgICAgICAgICAgd2lkdGg6IDEwMCU7CiAgICAgICAgICAgIHRleHQtYWxpZ246IGNlbnRlcjsKICAgICAgICAgICAgZm9udC1zaXplOiAxNHB4OwogICAgICAgICAgICBmb250LXdlaWdodDogNjAwOwogICAgICAgIH0KICAgICAgICAuc21hbGwtbG9nbyB7CiAgICAgICAgICAgIHdpZHRoOiAyNHB4OwogICAgICAgICAgICBoZWlnaHQ6IDI0cHg7CiAgICAgICAgfQogICAgICAgIC5pbmxpbmUgewogICAgICAgICAgICBkaXNwbGF5OiBpbmxpbmU7CiAgICAgICAgfQogICAgICAgIC8qIFR5cGUgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICovCiAgICAgICAgcCB7CiAgICAgICAgICAgIG1hcmdpbjogMDsKICAgICAgICAgICAgY29sb3I6ICMzOTM5M2E7CiAgICAgICAgICAgIGZvbnQtc2l6ZTogMTVweDsKICAgICAgICAgICAgbXNvLWxpbmUtaGVpZ2h0LXJ1bGU6IGV4YWN0bHk7CiAgICAgICAgICAgIGxldHRlci1zcGFjaW5nOiBub3JtYWw7CiAgICAgICAgICAgIHRleHQtYWxpZ246IGxlZnQ7CiAgICAgICAgICAgIGxpbmUtaGVpZ2h0OiAyMHB4OwogICAgICAgIH0KICAgICAgICBwICsgcCB7CiAgICAgICAgICAgIG1hcmdpbi10b3A6IDIwcHg7CiAgICAgICAgfQogICAgICAgIHAuc3VmZml4IHsKICAgICAgICAgICAgZm9udC1zaXplOiAxNHB4OwogICAgICAgIH0KICAgICAgICBwLnN1YiB7CiAgICAgICAgICAgIGZvbnQtc2l6ZTogMTJweDsKICAgICAgICB9CiAgICAgICAgcC5jZW50ZXIgewogICAgICAgICAgICB0ZXh0LWFsaWduOiBjZW50ZXI7CiAgICAgICAgfQogICAgICAgIC5zdWJ0bGUgewogICAgICAgICAgICBjb2xvcjogI2IxYjFiMTsKICAgICAgICB9CiAgICAgICAgLyogRm9vdGVyIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqLwogICAgICAgIC5sb2dvLWxhYmVsIHsKICAgICAgICAgICAgdmVydGljYWwtYWxpZ246IHRvcDsKICAgICAgICAgICAgZm9udC1zaXplOiAxNHB4OwogICAgICAgICAgICBtYXJnaW4tbGVmdDogNHB4OwogICAgICAgIH0KICAgICAgICAuZm9vdGVyLWNlbGwgewogICAgICAgICAgICBwYWRkaW5nOiA4cHggMjRweDsKICAgICAgICB9CiAgICAgICAgLmZvb3Rlci1uYXYgewogICAgICAgICAgICBtYXJnaW4tbGVmdDogOHB4OwogICAgICAgICAgICBmb250LXNpemU6IDE0cHg7CiAgICAgICAgICAgIGNvbG9yOiAjMzkzOTNhOwogICAgICAgICAgICB0ZXh0LWRlY29yYXRpb246IG5vbmU7CiAgICAgICAgfQogICAgICAgIC5oZWFkZXItbGluayB7CiAgICAgICAgICAgIHRleHQtZGVjb3JhdGlvbjogbm9uZTsKICAgICAgICAgICAgZm9udC1zaXplOiAxNHB4OwogICAgICAgICAgICBjb2xvcjogIzFkNTVmZjsKICAgICAgICAgICAgZm9udC13ZWlnaHQ6IDUwMDsKICAgICAgICB9CiAgICAgICAgLm1hcmdpbi10b3AgewogICAgICAgICAgICBtYXJnaW4tdG9wOiAxNnB4OwogICAgICAgIH0KICAgICAgICAubG9nby1jb250YWluZXIgewogICAgICAgICAgICB3aWR0aDogMTAwJTsKICAgICAgICAgICAgbWFyZ2luLWJvdHRvbTogNTZweDsKICAgICAgICB9CiAgICAgICAgLmxvZ28gewogICAgICAgICAgICB3aWR0aDogMjglOwogICAgICAgICAgICBkaXNwbGF5OiBibG9jazsKICAgICAgICB9CiAgICAgICAgLyogQ3VzdG9tIHN0eWxlcyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKi8KICAgICAgICBociB7CiAgICAgICAgICAgIGJvcmRlci10b3A6IDFweCBzb2xpZCAjZDlkOWRlOwogICAgICAgICAgICBjb2xvcjogI2Q5ZDlkZTsKICAgICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogI2Q5ZDlkZTsKICAgICAgICAgICAgbWFyZ2luLXRvcDogMzJweDsKICAgICAgICAgICAgbWFyZ2luLWJvdHRvbTogNDBweDsKICAgICAgICB9CiAgICAgICAgaDEgewogICAgICAgICAgICBmb250LWZhbWlseTogIkZhdXN0aW5hIiwgc2VyaWY7CiAgICAgICAgICAgIGZvbnQtc2l6ZTogMzJweDsKICAgICAgICAgICAgZm9udC13ZWlnaHQ6IDYwMDsKICAgICAgICAgICAgY29sb3I6ICMyMzIzMjY7CiAgICAgICAgICAgIG1hcmdpbi1ib3R0b206IDIycHg7CiAgICAgICAgfQogICAgICAgIHAgewogICAgICAgICAgICBmb250LWZhbWlseTogIlNvdXJjZSBTYW5zIFBybyIsIHNhbnMtc2VyaWY7CiAgICAgICAgICAgIGZvbnQtc2l6ZTogMThweDsKICAgICAgICAgICAgbGluZS1oZWlnaHQ6IDEuNjsKICAgICAgICAgICAgY29sb3I6ICMyMzIzMjY7CiAgICAgICAgfQogICAgICAgIC5idXR0b24gewogICAgICAgICAgICBmb250LWZhbWlseTogIlNvdXJjZSBTYW5zIFBybyIsIHNhbnMtc2VyaWY7CiAgICAgICAgfQogICAgICAgIC5jb250ZW50LWNlbGwgewogICAgICAgICAgICBwYWRkaW5nOiA0MHB4IDQwcHg7CiAgICAgICAgfQogICAgICAgIC5idXR0b24gewogICAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmY1YTI2OwogICAgICAgICAgICBib3JkZXItdG9wOiAxMHB4IHNvbGlkICNmZjVhMjY7CiAgICAgICAgICAgIGJvcmRlci1yaWdodDogMThweCBzb2xpZCAjZmY1YTI2OwogICAgICAgICAgICBib3JkZXItYm90dG9tOiAxMHB4IHNvbGlkICNmZjVhMjY7CiAgICAgICAgICAgIGJvcmRlci1sZWZ0OiAxOHB4IHNvbGlkICNmZjVhMjY7CiAgICAgICAgICAgIGRpc3BsYXk6IGlubGluZS1ibG9jazsKICAgICAgICAgICAgY29sb3I6ICNmZmY7CiAgICAgICAgICAgIHdpZHRoOiBhdXRvOwogICAgICAgICAgICBib3gtc2hhZG93OiBub25lOwogICAgICAgICAgICB0ZXh0LWRlY29yYXRpb246IG5vbmU7CiAgICAgICAgICAgIGJvcmRlci1yYWRpdXM6IDhweDsKICAgICAgICAgICAgLXdlYmtpdC10ZXh0LXNpemUtYWRqdXN0OiBub25lOwogICAgICAgICAgICBtc28tbGluZS1oZWlnaHQtcnVsZTogZXhhY3RseTsKICAgICAgICAgICAgdGV4dC1hbGlnbjogY2VudGVyOwogICAgICAgICAgICBmb250LXNpemU6IDE0cHg7CiAgICAgICAgICAgIGZvbnQtd2VpZ2h0OiA2MDA7CiAgICAgICAgfQogICAgPC9zdHlsZT4KPC9oZWFkPgo8Ym9keT4KPHRhYmxlIGNsYXNzPSJlbWFpbC13cmFwcGVyIiB3aWR0aD0iMTAwJSIgY2VsbHBhZGRpbmc9IjAiIGNlbGxzcGFjaW5nPSIwIj4KICAgIDx0cj4KICAgICAgICA8dGQgYWxpZ249ImNlbnRlciI+CiAgICAgICAgICAgIDx0YWJsZQogICAgICAgICAgICAgICAgICAgIGNsYXNzPSJlbWFpbC1jb250ZW50IgogICAgICAgICAgICAgICAgICAgIHdpZHRoPSIxMDAlIgogICAgICAgICAgICAgICAgICAgIGNlbGxwYWRkaW5nPSIwIgogICAgICAgICAgICAgICAgICAgIGNlbGxzcGFjaW5nPSIwIgogICAgICAgICAgICA+CiAgICAgICAgICAgICAgICA8dHI+CiAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzPSJlbWFpbC1tYXN0aGVhZCI+PC90ZD4KICAgICAgICAgICAgICAgIDwvdHI+CiAgICAgICAgICAgICAgICA8IS0tIEVtYWlsIEJvZHkgLS0+CiAgICAgICAgICAgICAgICA8dHI+CiAgICAgICAgICAgICAgICAgICAgPHRkCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iZW1haWwtYm9keSIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoPSIxMDAlIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2VsbHBhZGRpbmc9IjAiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjZWxsc3BhY2luZz0iMCIKICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICAgIDx0YWJsZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJlbWFpbC1ib2R5X2lubmVyIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFsaWduPSJjZW50ZXIiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2lkdGg9IjEwMCUiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYmFja2dyb3VuZC1jb2xvcj0iI2VkZWZmMiIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjZWxscGFkZGluZz0iMCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjZWxsc3BhY2luZz0iMCIKICAgICAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPCEtLSBCb2R5IGNvbnRlbnQgLS0+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dHI+PC90cj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9ImNvbnRlbnQtY2VsbCIgd2lkdGg9IjEwMCUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDE+SGFsbG97JSBpZiBuYW1lfGRlZmF1bHQgJX0ge3sgbmFtZSB9fXslIGVuZGlmICV9LDwvaDE+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHslIGlmIGhlYWRlcnxkZWZhdWx0ICV9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7eyBoZWFkZXIgfCBubDJiciB9fQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGJyLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeyUgZW5kaWYgJX0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeyUgaWYgYm9keXxkZWZhdWx0ICV9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7eyBib2R5IHwgbmwyYnIgfX0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeyUgZW5kaWYgJX0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGhyLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeyUgaWYgYm9keXxkZWZhdWx0ICV9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7eyBmb290ZXIgfCBubDJiciB9fQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7JSBlbmRpZiAlfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cD5NZXQgdnJpZW5kZWxpamtlIGdyb2V0LDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHA+Q29uZHVjdGlvbjwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibG9nby1jb250YWluZXIiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0ibG9nbyIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3JjPSJkYXRhOmltYWdlL2pwZztiYXNlNjQsaVZCT1J3MEtHZ29BQUFBTlNVaEVVZ0FBQU9FQUFBRGhDQU1BQUFBSmJTSklBQUFBaWxCTVZFWC8vLzlEZHZ3K2MveFdnL3pYNHY4M2IvenY4Lzl3bHYyeHd2NDhjdnkweC81bmp2ekcxUDdoNlAvOC9mOHpidnozK2Y4dmEvem43di9SM2Y1U2dQeElldnp0OGYraHVQMXRrdnhmaXYyOHpQN3o5djlFZVB5SXB2MkFvZjJZc2Y0cWFQekoyUDU0bXZ5aHV2M2Q1ZjdIMWY2T3F2MjR5djZ4dy82YXN2MWdpL3lEby8xZGh2eXB2djV4UDVoRUFBQUtVRWxFUVZSNG5PMWRhWHZ5S2hSOGc2TGlscjBtYXJSYWE5WHEvLzk3MTNTN2FrTXlKQ0RZaC9uY0tpT0g1U3ljK2ZmUHdzTEN3c0xDd3NMQ3dzTEN3c0xDd3NMaUQyTFVkVTZlN2tFb3hOTXBZbzYvSHVvZWh6SU1qNFE0anNQaTlVejNVSlFnVE4yY1h3N21MZ1BkdzVHTzBZUis4OHZocHRNL3RoeGZXc3k1QW5IV29lNUJ5WU0zalZ6aTNJSThMMGE2UnlZSjdRWDV6ZTlqT2JZbUhkMkRrNERaTW1LRi9QSnBaTWxVOS9pYVl0YjNLWS9mQjBjL0hZMTFEN0lKcGwzdS9QMXduQzgzdW9kWkcwRTJyeVQ0c1J6N3VrZGFENTB0UmZqbDAraTJobzkzT25yOWc0dngrK1NZdFhXUFdCQ2J4Q2srSWJpbUdtMTFqMWtFbTRVdnhpOEhkZnFQY2pvKzlhQU5wb0Jqc25xSWsyTjZxTWZQeWYycXpIaWZZeHdtTlF6MGdxTS9NWnRqc0sxcG9CY2MwNTNCcHRwTFM2OW9HQWhaRzNweWVNTzR3RWVxQStaMm4zU3pLY0FxNC9oSXRUaTJUcWFkSE40K1JxOW8yRitSZEtXYjB5Vzhrd011UUJZZHdLa203c0NjTU1kdzdXUDh6aDV2R094aTlOZHdKbWFFT1dacjFFQnA5SEV2RzJVVVhMSHNlTkxON253Q0xsMlEzOFhkZXBQTVVWT05Ydlg2VmQ0MEJYMGs0bTdibC8rSCtsYkVXZWdNQVlScmRHdjBqOFBybTBwbmo4NDliZTExSlFGRzJUTzZub3JpRk1IV3dUZ1NTcWM2T0hZbXQyRnNMcjk0WDd3bkFuR3E3NC9vM2ovcU9Fd1lhcUFEYnJ4d05xWGd0c3JtMjd0ZTVNYWpGUFNSemlkZ2FiWnd0bStocDZPN3Y5OUZick1FTi92OGZsbTFnallMTktMakh1NlZyK3JEQy9CNUM3aXozbXRSM3FZSVpKN2M0WkxqRFZ2b2VQRDgyZWtJUjFZejFSemJHZW9EQ3VWQWIvS25KYUR4VHVseTNQTHpTTmRnYkM4V2J3a0hxR2tRZGZtcVRoLzJrZUtGK0JHOVNsRy95dStHS2tJNTR6QkJnekQrK3JYT04zUk9zSVhFQ2lvZGdnejJrWngrM1UzOXFRczdLcW5rZkZVdzhXRWZhZExFZ3Rwck9BUVFyK1NkanVQK0FOM05XZFl3OUREZXBlaDNrYTJzTU1lZGY5ZTcyY3MzUk5iR3J2cmpac0JwRnJ6amEzN1g5Q2Z0bkhBZkNkbmZ3Z1hpQjQxWCtMNjlxTFZ2LzBEeUdUVTczeGpZSExsNENaMjlEUzQ1UGRDSkoyUUF6TXgzNVFtalMyUk1HWG82MHJoK25xT0gvWTdZWGZFdCtSbXhlMENPVFBRT1RGcjFHZTRRaG9RaVpqZGFYRVpsaUpNQU96M294elJoQ016aDJXY0RvbjJkN0xieWhMaElsSEM4QXpZNnRRd2h2M3UySzhvcnNua1BDTDBBOFFTVlZzcm9GbGlBNFlBVHAyQUg0SEpaSFJOU040Zk1RWUlVbXpWL0xSRS9RZnlnYVhsY1R4bERLSWI1ZENwUDdMTTU4aXQxSmxISlNOUllLYUcwRHppNS9VUGxYa2hUSkw4MFd2Q1BaaVZ6Q09VU3h1RUJpYXFlNyt0STNSNC9SNktBSVNISVRoOXMwY1ErSWU5QVN0dWJIam5Ea1c2bGJvVDg1aWVSeWhNVzc0R1BESmFGbTViME9ZeUJkZU1OSGNIS0UrcFVSc2ZQbUEwS1BsVTJROUt0SHNscUFhWnRMdUYzZ2ZkUWIwVWprbXlscEZ0MXlIZVdxQU43ODhuQWU2aStaSWJGYzFqT2NEYVoxeTc5cW40UFpRRERZVmVnK1BrMzZMSDhuaXVib2JDVkJ1dTRZZWxYUlQ1SDh4d0dTN1E2djVSajJYc29yUXhudkJOWkdEVGl2b2ZTYWFXaGFIVitDZmp2b2ZUTllkbk51QlpIUHgwVmJUbTZHRDZWZWpmMVFKMml1Nm9tSzUwdDhDc2FuaUJvRngzL211YXdVKzBGL3ZEcnJwRTZEbnA0S3g2UkxvWkY5K0hDZ1I5NzNuaFltVnc2ZXhxOEdKVW1Ld1Vac3VmUE8xbndRc280RXIra1Z0L2tPU1R6eGMrZGM4WlBLQk1uS1V1MUdNeVFwcStYVWJYVm9yaHcrcXVNK0c0TXBWa3BZNmVibGVYMTQ5OVhkRmFaSURCMERsbWNGWnplM20zcEJRT0t1b3hrU09pQ0UyZHFYOFdxM0FSSUVKaG9wVzcweGgyNDEvNTVTRVRKQkNreU1tOE9XVlRSY09mdDQzUmtNVmdnYXhwRDRtd3J2enpZeDR6QlRYa01zMUszMVVhcVFkcHJ2aDNmd3F3NWpJSGlFMUVZeFpDMEZEd0ZNY3BLbTN3eEY0Yk5vV1ZZQTlaS1JmSDM1L0R2TTdSVytnWExVQ0tzbFlyaTc4L2gzMmRvcmZRTGxxRkVXQ3NWeGQrZnc3L1AwRnJwRnl4RGliQldLb3BtOGRKSVFTOHJzeGc2Q2FmYzRCWXIvUEdaVVZhYXB5MlFqdDJkTEU3ZzJUWnNEdk5HajFuRi9IUk9QaXZ0OEhJTjR4am1CU2E3c3J4Zy8rdXhLSXV4SGd5R1dlbm4zenY4em5LYmkyN3RwSVdzV2dQbk1QOFB0MXM0aEU1MjlXajdkN2VzaDJHWTF5Q2NmdG5nclBlckhQVzY0OWxkR01xcmlXS0htMlJpbUJhVm81Sm9mMStHRWl1R2lILzQveUhldU4zbFZETVNHcFcrR0RPWW9aTjNlZmc2SFlOSnlaTTl3c3BLMmMyMTBnL1E0MHMramIyMG9zQW80aCtpUnM5aC9yL1VHYTdTNm5KYjV2TmEwR3BpK0ZReEtaZWdXSkV3VFlxZkNPdXExWDk3bGw3bVRVamhjdFJXcTE4bXRWSVBuUFlaR2wrVXROZG9QektNSU9jWnRjNFhKY1dTUi9YQWYwYXQrZDNUTDltcWVtRFJrbnZvNjM2ZE4xbzJOMVZDRmlVRDF2NDZieHdDcDEwcHY0cG4xTHJuTU1ldzFhRDdQR3U5bEkvSUJJYi9ncGU2SndlaGxTM0s3Mk9sVmRYSzQ5RWFiUTkyOWNGSW0vbTd6T0VBS0tvTXU2S21Tc2dScVJOK3VRUERzek1MMU5SN2dtSWVMTHA5a0ZHRTBVUjJjTDI0YXdUV1hEYVlQTU9tQ2twMmNNNWJGYjFOeURQUy9DcFlZS0l6MkMvbURYbDNKalVkZUNCeHh2SHJBREJWbWtLdHpYZ3lrU3FzOVBOakt4cDFmK0pwUnlvNHNtZEUvcWpVZDFIV1JRa1RaL1JLVytleCtCM2gxNmVsQTFIWHpRd1Rad3pmdVpkVk9rQmt5S3JhN3l2dHVRZUpNM3B2eFhzRUpUdGdCNjJXVUZEYmtRNFRaL1IydjAyVlJSa3dBa1FtVW5GWFFWQ2NzYjI5RG5FVDl4MzRMKzhOa1RKUjNoa1NFMmNjdDF2L04vNnE4cEcrQU1yUk5KcERVT1VJRTJlY2ZwK09ySVdJeDhFeWtTU3F6M0NEQ2prNUZHa1AyTm5ueTVITXQ4QU8zTm1oS255TXZEUm9RdXNKTkx0RnhCbEg2MmMvUlo3c1RlRXd1cDlBVHdENUdFL1F0bGFZT0dPSU5FcUdaU0lKU1NYMDlGNWxhR3N5TnVqTDZLK055MFJTU1JKNzNnb1ZOcFFpenRoRG03SXpmeUZQWFFkdUJjL2NadDhxOUd0S2ZjRVp3RjNtR2xrT3ZpS29uQlZ4Z1hIWXhWZC96WUkyWENhUytVMU9DQzdPT3pqYW9EMnBzUnhsbjB4MTBNSEZHWW13T0NNc0Ura3dxUGx3VFl4Z3dXMUJjVVlCbVVqVjh0MEM0b3hIV0p3eDJETnhtVWhsa0MvT1dGY21VaDBRci9RVHRMV3ZYakc0VE9UWjI3NlhvTFZFY2NhR01wSHFJQ0xPV0JKMW5EV1hpVlNHUE1JSGlqUHllODhJeUVRaWtVdlphQ3JPS0U4bVVoMDIvRWo3RFFwRUlnSUJtVWlvd1pJUzhMTWx2NmJodG8rWGdFeWtjc25EY3VCcVNSZmlqRXBrSXBWQlJKeng2NzZsU0NaU0hYQnhSdWVqZWE0Nm1VaDFXQjFodjJwOVFodWExNUtKVklZbldKeXhLcC80QXgvdWNIWW40QUowRUJySVJLb0RMQ0pZRFJaTGtmMlREZytPeUpXRHNFekJ5MFU1RUtrdzRmS1RLcjhwSDdnNEl3Y3M3ZW5tVUFFQmNjWWlmaXBrY0tXalUxbGh3Z01vNFdVQ1lISEdLMzZRVEtRcHdHK2VQMUF0S1M0YnVGLzFOWUUrOGlqYUxFRGlqTi84SUpsSTh3Q0lNMzRDa29rMEV1TTJFb25CWkNLTnhUU3A4STh4bVVpVFVTN09pTWxFbWc2K0JBMG9FL2tBQ0x1Rm1Ra1dBVEtSRDRJaUthank5MDJQaDJCNUhRSUFhL2NlQ3JOTFNUYldFc29RUHdxR1hmOTdoeEhPOGo4SVpxZTgyZ0o2My9TdzhQWXhPUm9iaEpHRFZmL0JyekFXRmhZV0ZoWVdGbHJ3SC9xZjBSTzMvZ2xzQUFBQUFFbEZUa1N1UW1DQyIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWx0PSJpbWciCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0ibWFpbHRvOnN1cHBvcnRAY29uZHVjdGlvbi5ubCI+aW5mb0Bjb25kdWN0aW9uLm5sPC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0cj48L3RyPgogICAgICAgICAgICAgICAgICAgICAgICA8L3RhYmxlPgogICAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICA8L3RyPgogICAgICAgICAgICA8L3RhYmxlPgogICAgICAgIDwvdGQ+CiAgICA8L3RyPgo8L3RhYmxlPgo8L2JvZHk+CjwvaHRtbD4=",
        "variables":
        {
            "subject": "{% if hoofdObject.identificatie|default %}hoofdObject.identificatie{% endif %}",
            "name": "{% if object.persoon.contactnaam|default %}object.persoon.contactnaam{% endif %}",
            "header": "",
            "body": "Er is een {% if hoofdObject.omschrijving|default %}{{hoofdObject.omschrijving}}{% endif %} zaak met identificatie {% if hoofdObject.identificatie|default %}{{hoofdObject.identificatie}}{% endif %} voor u aangemaakt.",
            "footer": ""
        },
        "sender": "no-reply@conduction.nl",
        "receiver": "wilco@conduction.nl",
        "subject": "Zaak aangemaakt: {{subject}}",
        "replyTo": "info@conduction.nl"
    }
}